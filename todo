[ ] Adder: 

    [x] Provide to the rest of the team the number of cycles needed or the handshaking signals that indicates the module 
    [x] Implement the 2 fixed point adder/subtractors using same interface (module/entity) so that it is easy to plug them into your code. 
    [x] ripple adder shouldn’t be one of the two adders. 
    [ ] sw equivalent
    [x] testbench to the updated interface & subtractor part and re-run your testing.
    [ ] synth (produce verilog files)
    [ ] post-synthesize simulation.
    [ ] Record the Different Area/power/time for each adder in a Table form.

[ ] Multiplier:

    [x] Provide to the rest of the team the number of cycles needed or the handshaking signals that indicates the module 
    [x] Implement the 2 fixed point multipliers using same interface  (module/entity) so that it is easy to plug them into your code. (use the adder interface inside it to easily switch etween different adders)
    [x] Wrap the multiplier you implemented last phase wrap it in an entity/module that shares the interface as the other 2 multipliers.
    [x] Adjust testbench to the updated interface and re-run your testing.
    [ ] sw equivalent
    [ ] synth (produce verilog files)
    [ ] post-synthesize simulation.
    [ ] Record the Different Area/power/time for each multiplier in a Table form.

[ ] Division:

    [x] Provide to the rest of the team the number of cycles needed or the handshaking signals that indicates the module 
    [x] Implement fixed-point division (use the adder interface inside it to easily switch between different adders).
    [ ] sw equivalent
    [x] Implement testbench to test the above circuit.
    [ ] synth (produce verilog files)
    [ ] post-synthesize simulation.
    [ ] Record the Different Area/power/time for each adder in a Table form.

[ ] RAM: 

    [x] implement your memory, and make it generic (widths and height) with the correct number of ports and address buses as required by your design.
    [x] Implement testbench to test the above circuit .
    [x] Make sure to test your corner cases, for example if your design reads and writes in the same cycle you need to test it.
    [ ] synth (produce verilog files)
    [ ] post-synthesize simulation.
    [ ] Record the Different Area/power/time for each adder in a Table form.

[x] cpu_tb should pass by commenting lines of integration
[x] CPU: Implement the CPU software (parsing and compressing data)

[ ] IO 

    [x] Design  
    [x] Implementation
    [ ] synth (produce verilog files) 
    [ ] post-synthesize simulation
    [x] Testbench (use output of the CPU software to test and simulate IO)
    [ ] Record the Different Area/power/time for each adder in a Table form.

[ ] Interpolator

    [x] Design  
    [x] Implementation
    [ ] synth (produce verilog files) 
    [ ] post-synthesize simulation
    [x] Testbench 
    [x] Software equivalent functionality
    [ ] Record the Different Area/power/time for each adder in a Table form.

[ ] Solver

    [x] Design  
    [ ] Implementation
    [ ] synth (produce verilog files) 
    [ ] post-synthesize simulation
    [x] Testbench 
    [x] Software equivalent functionality
    [ ] Record the Different Area/power/time for each adder in a Table form.

[ ] all vunit tests pass
[ ] vunit tests are up-to-date with non_vunit of tests
[ ] use fastest architectures in all files

[ ] Zipped Folder with your TeamNumber as its name that contains

    [ ] 1. Complete System Design Report
    [ ] 2. Mini Folder with
        [ ] 2.1. Mini Modules Design Report + comparison in Time/Area/Power.
        [ ] cpu_tb.vhdl
        [ ] scripts/preprocessor.py and output_formatter.py
        [ ] 2.2 Mini Modules Codes.
        [ ] 2.3 Readme.txt the explains how to run any attached software.
    [ ] 3. Macro Folder with
        [ ] 3.1 Macro Modules Design Report + report Time/Area/Power.
        [ ] 3.2 Macro Modules Codes (verilog/vhdl before and after synthesis, testbench, software, do.files)
        [ ] 3.3 Readme.txt the explains how to run any attached software.
    [ ] 4. Task distribution Excel sheet (Name, task, estimated time,problem faced) don’t add total time for all tasks, and record time as soon as you do it.
